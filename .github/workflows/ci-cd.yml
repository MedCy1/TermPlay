name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job de tests et linting
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items

  # Job de build multi-plateforme
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: termplay-linux-x86_64
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: termplay-linux-aarch64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: termplay-windows-x86_64.exe
            
          - os: macos-latest
            target: x86_64-apple-darwin
            name: termplay-macos-x86_64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            name: termplay-macos-aarch64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Dépendances système par OS
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          
      - name: Install Linux cross-compilation tools
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      # Build du projet
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      # Preparation des binaires pour upload
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip termplay || true
          mv termplay ${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          mv termplay.exe ${{ matrix.name }}

      # Upload des artifacts
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: target/${{ matrix.target }}/release/${{ matrix.name }}

  # Job de release automatique
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Display structure of downloaded files
        run: ls -la ./binaries/

      # Créer des archives pour chaque plateforme
      - name: Create archives
        run: |
          cd binaries
          
          # Linux x86_64
          tar -czf termplay-linux-x86_64.tar.gz termplay-linux-x86_64/termplay-linux-x86_64
          
          # Linux aarch64
          tar -czf termplay-linux-aarch64.tar.gz termplay-linux-aarch64/termplay-linux-aarch64
          
          # macOS x86_64
          tar -czf termplay-macos-x86_64.tar.gz termplay-macos-x86_64/termplay-macos-x86_64
          
          # macOS aarch64 (Apple Silicon)
          tar -czf termplay-macos-aarch64.tar.gz termplay-macos-aarch64/termplay-macos-aarch64
          
          # Windows
          zip termplay-windows-x86_64.zip termplay-windows-x86_64.exe/termplay-windows-x86_64.exe

      # Upload vers la release GitHub
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            binaries/termplay-linux-x86_64.tar.gz
            binaries/termplay-linux-aarch64.tar.gz
            binaries/termplay-macos-x86_64.tar.gz
            binaries/termplay-macos-aarch64.tar.gz
            binaries/termplay-windows-x86_64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de benchmark (optionnel)
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev

      - name: Run benchmarks
        run: cargo bench --no-run  # Prépare les benchmarks sans les exécuter

  # Job de sécurité
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit